Программа, решающая "сложную" задачу, представлена файлами, находящимися в этой папке.
Основу составляет файл hard1.py.
Для того, чтобы можно было легко расширять список вычисляемых программой функций, предназначен отдельный модуль, представленный файлом calculator.py.

Для расширения списка функций достаточно отредактировать только файл этого модуля, не меняя основной код программы.
При этом требуется добавить функцию, которая принимает строку с аргументами и возвращает соответствующее значение, а также добавить в переменную fmap пару соответствия между обозначением функции в исходном текстовом файле и функцией в программе, реализующей соответствующие вычисления.
Например, так: "fmap = {'FIB':FIB.fib, 'F':factS, 'ACK':ackS, 'SIN': sinS}". Здесь добавлена пара 'SIN': sinS, в которой 'SIN' обозначает наименование функции в исходном файле, а sinS - название функции в программе.
Программа может быть легко изменена так, чтобы функции принимали не только целочисленные аргументы, но и аргументы другого типа.
Это достигается за счет передачи в функцию аргументов в виде строки. Каждая функция может сама преобразовать строку в список операндов требуемого типа.

Модуль calculator.py был реализован двумя спосабами. Первый вариант представлен файлом calculator0.py (чтобы его задействовать, необходимо его перименовать в calculator.py). Это наиболее простой вариант реализации требуемого функционала. Его недостатками является относительно медленная работа из-за большого количества рекурсивных вызовов функций.
Так как файл, поступающий на обработку может иметь большое число строк, то желательно максимально ускорить работу программы.
Для этого модуль calculator.py был реализован вторым способом (файл calculator.py). Этот способ отличается от первого реализацией функций вычисления чисел Фибоначчи и функции Аккермана. Для вычисления чисел Фибоначчи был использован матричный способ, который позволяет существенно ускорить вычисления за счет отказа от рекурсивного алгоритма. Вычисление функции Аккермана было ускорено с помощью сохранения и последующего использования результатов промежуточных вычислений.
Эти улучшения позволили выполнять обработку достаточно больших файлов за разумное время (например, файл, содержащий 1000000 строк и соответствующий описанным ниже допущениям, был обработан менее чем за 25 секунд).

При решении задачи были приняты следующие допущения:
1) первый аргумент функции Аккермана меньше 4
2) второй аргумент функции Аккермана меньше 14
3) аргумент функции Фибоначчи не превосходит 1000 (несущественное допущение, программа нормально работает и с существенно большими аргументами, однако время вычисления увеличивается)
4) аргумент функции факториала не превосходит 100 (аналогично предыдущему, несущественное допущение)
5) исходный файл содержит только корректные данные

К недостаткам программы можно отнести следующее:
1. отсутствие обработки исключений
2. однопоточная работа
3. отсутствие информирование пользователя о ходе выполнения обработки файла
